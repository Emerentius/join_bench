#![feature(test)]
extern crate test;
use std::ptr;

fn join(slice: &[&str], sep: &str) -> String {
    if slice.is_empty() {
        return String::new();
    }

    // concat is faster
    if sep.is_empty() {
        return slice.concat();
    }

    // this is wrong without the guarantee that `slice` is non-empty
    // `len` calculation may overflow but push_str but will check boundaries
    let len = sep.len() * (slice.len() - 1) +
                slice.iter().map(|s| s.len()).sum::<usize>();
    let mut result = String::with_capacity(len);
    let mut first = true;

    for s in slice {
        if first {
            first = false;
        } else {
            result.push_str(sep);
        }
        result.push_str(s);
    }
    result
}
/*
fn join2_<S: std::borrow::Borrow<str>>(slice: &[S], sep: &str) -> String {
    // concat is faster
    if sep.is_empty() {
        return slice.concat();
    }

    let mut iter = slice.iter();
    if let Some(first) = iter.next() {
        // this is wrong without the guarantee that `slice` is non-empty
        // `len` calculation may overflow but push_str but will check boundaries
        let len = sep.len() * (slice.len() - 1) +
                    slice.iter().map(|s| s.borrow().len()).sum::<usize>();
        let mut result = String::with_capacity(len);

        result.push_str(first.borrow());

        for s in iter {
            result.push_str(sep);
            result.push_str(s.borrow());
        }
        result
    } else {
        String::new()
    }
}
*/

#[allow(unused)]
fn join_into_vec<T, S>(slice: &[S], sep: &[T]) -> Vec<T>
where
    T: Clone,
    S: std::borrow::Borrow<[T]>,
    //B: std::convert::AsRef<[T]> + ?Sized,

{
    /* FIXME
    // concat is faster
    if sep.is_empty() {
        return slice.concat();
    }
    */

    let mut iter = slice.iter();
    if let Some(first) = iter.next() {
        // this is wrong without the guarantee that `slice` is non-empty
        // `len` calculation may overflow.
        // catch `len` overflows and panic directly. The rest of this function relies
        // on having reserved no less than the necessary memory
        // the safe alternative would panic anyway by running out of memory
        let len =  sep.len().checked_mul(slice.len() - 1).and_then(|n| {
            let mut sum = n;
            for l in slice.iter().map(|s| s.borrow().len()) {
                sum = sum.checked_add(l)?;
            }
            Some(sum)
        }).expect("attempt to join into collection with len > usize::MAX");

        let mut result = Vec::with_capacity(len);
        result.extend_from_slice(first.borrow());

        unsafe {
            {
                let pos = result.len();
                let mut slice = result.get_unchecked_mut(pos..len);
                //let mut pos = result.len();

                for s in iter {
                    /*
                    result.get_unchecked_mut(pos..pos+sep.len()).copy_from_slice(sep.as_bytes());
                    result.get_unchecked_mut(pos+sep.len()..pos+sep.len()+s.borrow().len()).copy_from_slice(s.borrow().as_bytes());
                    pos += sep.len() + s.borrow().len();
                    //result.push_str(s.borrow());
                    */

                    /*
                    let new_pos = pos + sep.len() + s.borrow().len();
                    let slice = result.get_unchecked_mut(pos..new_pos);
                    let (sep_slice, str_slice) = slice.split_at_mut(sep.len());
                    sep_slice.clone_from_slice(sep);
                    str_slice.clone_from_slice(s.borrow());
                    pos += sep.len() + s.borrow().len();
                    */
                    let s_bytes = s.borrow();
                    slice.get_unchecked_mut(0..sep.len())
                        .clone_from_slice(sep);

                    slice = {slice}.get_unchecked_mut(sep.len()..);
                    slice.get_unchecked_mut(..s_bytes.len())
                        .clone_from_slice(s_bytes);
                    slice = {slice}.get_unchecked_mut(s_bytes.len()..);
                }
            }
            result.set_len(len);
        }
        result
    } else {
        vec![]
    }
}

fn join2<S: std::borrow::Borrow<str>>(slice: &[S], sep: &str) -> String {
    // concat is faster
    if sep.is_empty() {
        return slice.concat();
    }

    let mut iter = slice.iter();
    if let Some(first) = iter.next() {
        // this is wrong without the guarantee that `slice` is non-empty
        // `len` calculation may overflow.
        // catch `len` overflows and panic directly. The rest of this function relies
        // on having reserved no less than the necessary memory
        // the safe alternative would panic anyway by running out of memory
        let len =  sep.len().checked_mul(slice.len() - 1).and_then(|n| {
            let mut sum = n;
            for l in slice.iter().map(|s| s.borrow().len()) {
                sum = sum.checked_add(l)?;
            }
            Some(sum)
        }).expect("attempt to join into String with len > usize::MAX");

        let mut result = String::with_capacity(len);

        unsafe {
            let mut result = result.as_mut_vec();
            result.extend_from_slice(first.borrow().as_bytes());
            let mut pos = result.len();

            {
                let mut slice = result.get_unchecked_mut(pos..len);
                //let mut ptr: *mut u8 = &mut result[pos];

                for s in iter {
                    /*
                    result.get_unchecked_mut(pos..pos+sep.len()).copy_from_slice(sep.as_bytes());
                    result.get_unchecked_mut(pos+sep.len()..pos+sep.len()+s.borrow().len()).copy_from_slice(s.borrow().as_bytes());
                    pos += sep.len() + s.borrow().len();
                    //result.push_str(s.borrow());
                    */

                    /*
                    let new_pos = pos + sep.len() + s.borrow().len();
                    let slice = result.get_unchecked_mut(pos..new_pos);
                    let (sep_slice, str_slice) = slice.split_at_mut(sep.len());
                    sep_slice.copy_from_slice(sep.as_bytes());
                    str_slice.copy_from_slice(s.borrow().as_bytes());
                    pos += sep.len() + s.borrow().len();
                    */

                    // BEST
                    let s_bytes = s.borrow().as_bytes();
                    slice.get_unchecked_mut(..sep.len())
                        .copy_from_slice(sep.as_bytes());

                    slice = {slice}.get_unchecked_mut(sep.len()..);
                    slice.get_unchecked_mut(..s_bytes.len())
                        .copy_from_slice(s_bytes);
                    slice = {slice}.get_unchecked_mut(s_bytes.len()..);

                    /*
                    let (sep_slice, tail) = {slice}.split_at_mut(sep_len);
                    let (s_slice, tail) = tail.split_at_mut(s.borrow().as_bytes().len());
                    let s_bytes = s.borrow().as_bytes();
                    sep_slice.copy_from_slice(sep.as_bytes());
                    //slice = {slice}.get_unchecked_mut(sep_len..);
                    s_slice.copy_from_slice(s_bytes);
                    slice = tail;
                    */

                    /*
                    ptr::copy_nonoverlapping(sep.as_bytes() as *const [u8] as *const u8, ptr, sep.len());
                    //ptr = ptr.add(sep.len());
                    let s_bytes = s.borrow().as_bytes();
                    ptr::copy_nonoverlapping(s_bytes as *const [u8] as *const u8, ptr.add(sep.len()), s_bytes.len());
                    ptr = ptr.add(sep.len() + s_bytes.len());
                    */
                }
            }
            result.set_len(len);
        }
        result
    } else {
        String::new()
    }
}

fn join_vec_other<T: Clone, V: std::borrow::Borrow<[T]>>(slice: &[V], sep: &T) -> Vec<T> {
    //return join_into_vec(slice, &[sep.clone()]);

    //let size = slice.iter().fold(0, |acc, v| acc + v.borrow().len());
    //let mut result = Vec::with_capacity(size + slice.len());
    /*
    let mut first = true;
    for v in slice {
        if first {
            first = false
        } else {
            result.push(sep.clone())
        }
        result.extend_from_slice(v.borrow())
    }
    result
    */

    let mut iter = slice.iter();
    if let Some(first) = iter.next() {
        // this is wrong without the guarantee that `slice` is non-empty
        // `len` calculation may overflow.
        // catch `len` overflows and panic directly. The rest of this function relies
        // on having reserved no less than the necessary memory
        // the safe alternative would panic anyway by running out of memory
        let len =  (|| {
            let mut sum = slice.len() - 1;
            for l in slice.iter().map(|s| s.borrow().len()) {
                sum = sum.checked_add(l)?;
            }
            Some(sum)
        })().unwrap();

        let mut result = Vec::with_capacity(len);
        result.extend_from_slice(first.borrow());

        unsafe {
            let mut pos = result.len();
            result.set_len(len); // FIXME after loop
            let mut slice = result.get_unchecked_mut(pos..len);

            for s in iter {
                /*
                result.get_unchecked_mut(pos..pos+sep.len()).copy_from_slice(sep.as_bytes());
                result.get_unchecked_mut(pos+sep.len()..pos+sep.len()+s.borrow().len()).copy_from_slice(s.borrow().as_bytes());
                pos += sep.len() + s.borrow().len();
                //result.push_str(s.borrow());
                */

                /*
                let new_pos = pos + 1 + s.borrow().len();
                *result.get_unchecked_mut(pos) = sep.clone();
                result.get_unchecked_mut(pos+1..new_pos).clone_from_slice(s.borrow());
                pos += 1 + s.borrow().len();
                */

                slice[0] = sep.clone();
                let offset = s.borrow().len();
                slice.get_unchecked_mut(1..1+offset).clone_from_slice(s.borrow());
                slice = &mut {slice}[1+offset..];

            }
        }
        result
    } else {
        vec![]
    }
}

fn join_vec<T: Clone, V: std::borrow::Borrow<[T]>>(slice: &[V], sep: &T) -> Vec<T> {
    let size = slice.iter().fold(0, |acc, v| acc + v.borrow().len());
    let mut result = Vec::with_capacity(size + slice.len());
    let mut first = true;
    for v in slice {
        if first {
            first = false
        } else {
            result.push(sep.clone())
        }
        result.extend_from_slice(v.borrow())
    }
    result
}

fn main() {
    println!("Hello, world!");
}

static SMALL: [&str; 10] = [
    "abcbedufglneul", "abcbeduaeeul", "abcbeeufglneul",
    "abcbesfglneul", "abcbofglneul", "abcbedcglneul",
    "abnfglneul", "abcbedcglneul", "abcbedalneul",
    "abcbevfglneul",];
static LONG: [&str; 1000] = ["8862205", "862120", "5267058", "1881263", "6802209", "2377309", "6884761", "2480056", "7448557", "4530034", "8394917", "6279235", "7807357", "8561563", "3230827", "3243825", "3503432", "6221971", "8837572", "2311554", "9905037", "548618", "3264032", "4867109", "9466642", "1993062", "104115", "9949047", "1185370", "5536112", "6736413", "1010186", "949542", "4359599", "1284449", "5958787", "699171", "7427528", "629918", "4299968", "6465455", "2820155", "531710", "4226993", "8133681", "9868299", "9266164", "3236046", "9846556", "6691221", "2270922", "2086406", "7011418", "2571711", "4579466", "6577118", "962157", "3610734", "2073021", "6241537", "8809063", "7311514", "354638", "6799626", "2945041", "4979656", "3211964", "4055489", "2016408", "6699256", "440984", "9179817", "9949411", "27934", "8183059", "6480472", "8427035", "810375", "2957997", "4660807", "5162557", "3460974", "4978530", "918794", "5710794", "4759702", "8124606", "2140004", "2447421", "2980946", "8632188", "1085717", "8935119", "746713", "5688085", "9881173", "9798945", "1015157", "8304124", "7651081", "2279712", "4343984", "4691565", "2625431", "8538201", "9879916", "7512520", "9269701", "1573798", "1059524", "6166511", "6599819", "4605174", "3739368", "6883907", "2487841", "5758440", "6430236", "4968365", "3258090", "3258501", "6290921", "5673243", "391766", "1647262", "2004786", "8444062", "6865419", "5257600", "6680734", "6709173", "4552769", "6433386", "8041009", "9485613", "3328789", "5095055", "2169779", "2200393", "8184165", "5206369", "1438971", "7905985", "8946637", "1161490", "8626713", "5042699", "6349632", "7407561", "9944275", "9161044", "8618157", "9763122", "9807168", "7929929", "3232629", "6137841", "2015488", "1250947", "7901140", "7504300", "2433424", "6242616", "9655203", "6806094", "7261116", "4979408", "3317942", "5723342", "8875589", "4385142", "6167248", "7800455", "2317044", "7464773", "6047424", "878087", "7232826", "2081524", "1477339", "7007211", "3825468", "2142982", "1326772", "9281289", "2630029", "3777360", "9229331", "6658828", "8053114", "7390665", "1548797", "8312264", "6299119", "4816281", "4054084", "4120733", "8911288", "8131907", "7107213", "2932731", "1164102", "2697709", "6469272", "9428136", "8701925", "7954003", "2731320", "1281541", "8766980", "2876113", "7888928", "9871158", "8240142", "2728383", "3966251", "4161830", "7706384", "6831404", "8859003", "5394162", "7825737", "7010615", "9937939", "6821499", "8080401", "1695193", "5125934", "4110032", "3207589", "484432", "306324", "4994097", "3534513", "1798173", "8869528", "4207978", "5258674", "5874112", "9646793", "9815226", "8692398", "4329388", "2977456", "2160720", "1676279", "7776238", "7690177", "4718795", "4917182", "4942042", "3606775", "5299805", "2786156", "2739952", "8267625", "4321351", "1445821", "6101909", "8516388", "7451793", "7443834", "442374", "1708424", "9893535", "6037048", "4260320", "9642493", "9344822", "3580965", "8287707", "5925263", "1988103", "716623", "6041406", "5302070", "2249202", "2087690", "2294318", "6978820", "4386461", "5977475", "8056874", "8056926", "8308475", "1891024", "7861805", "6905708", "562513", "4244719", "3354013", "1511024", "7111951", "3292557", "9066237", "9922263", "2101492", "8396315", "9323562", "6112412", "5747510", "2108764", "9394532", "2563516", "7784586", "2441022", "2409451", "4792575", "7471602", "7335796", "3610067", "6665680", "1685226", "2419055", "4355929", "3979615", "6297414", "5160589", "7514404", "9445901", "1140227", "5001699", "8544775", "8154725", "1868637", "7118861", "6132190", "694320", "5953590", "8454956", "5206953", "1966645", "6816221", "7922888", "7289293", "4119413", "2142166", "8537267", "6447599", "7551273", "851658", "5361293", "3467070", "8043577", "7550034", "9462070", "4236751", "8355947", "2646816", "7754016", "9632129", "7251705", "9847887", "1359680", "6305922", "1254448", "4704185", "2922435", "7332015", "4961257", "9356026", "9099224", "9092987", "8788673", "2488350", "614477", "8140321", "8818318", "170169", "2837885", "5708613", "6791153", "3426021", "1672411", "8262470", "1726842", "704466", "8358349", "2733483", "6001121", "9603015", "4592763", "8557819", "5984300", "5944994", "2877873", "1622971", "8377884", "3092416", "8298891", "8073066", "9855881", "827857", "1324354", "1040349", "4447343", "386346", "5403378", "7175322", "1417021", "6147993", "6048543", "5135934", "4181102", "3922214", "9882588", "8078398", "4846164", "9875799", "7887010", "7931029", "5756563", "5236540", "2016236", "4436239", "1264269", "4538710", "4732044", "3526597", "4371229", "8978682", "5029149", "1824814", "3184125", "8682371", "2678202", "8437724", "6278622", "4033614", "7788250", "8042754", "1856726", "2627422", "3396422", "2878318", "3689371", "5669451", "5378129", "2061001", "3538230", "7689705", "6317441", "1279197", "8069102", "1152751", "1043278", "110242", "1498713", "1919005", "6473844", "7326395", "7123761", "5056202", "2588724", "2216167", "9801701", "4778239", "5920542", "7883351", "8718619", "520354", "5935299", "7211846", "416419", "7012152", "7221830", "7046307", "9142361", "3991589", "9380227", "647860", "5680267", "1528981", "3507729", "9057707", "3185335", "1813286", "3479523", "108528", "1334504", "7172150", "6925561", "9014113", "4341378", "341964", "3793745", "773498", "747344", "7323046", "7384275", "6555756", "1970109", "9308963", "8162762", "9187904", "9355400", "2961663", "5939280", "5828749", "4491159", "5776307", "2735417", "5523039", "6110697", "3248730", "4584374", "2135517", "7294523", "9146349", "4941304", "6553650", "4150086", "8728817", "7318675", "7397393", "2124452", "5982344", "2991054", "8963139", "5175572", "4331992", "4389313", "3534975", "5357", "5782000", "7989744", "2213774", "6304935", "8761366", "6693241", "9019938", "2944686", "5017274", "4177415", "7816342", "9880424", "1795340", "1828137", "8450767", "1109055", "9726847", "2633162", "1484762", "5294617", "6248503", "7035530", "2156147", "1243350", "6824695", "7816832", "9340669", "7026208", "5585434", "5548246", "9600887", "9032417", "1017734", "7614354", "5581587", "5322705", "1160153", "6270616", "3074782", "5749206", "2358076", "4340359", "7157165", "4970992", "6331317", "421871", "4924391", "8732904", "369672", "9907049", "7118766", "3440143", "8776413", "3018218", "2522002", "7714232", "7766107", "28936", "5905759", "6232599", "1596305", "6489205", "4927712", "2160698", "7084994", "1811970", "3708884", "3201484", "3695741", "7288946", "8148524", "6384284", "5347964", "2527639", "5081256", "1588924", "7728811", "8276719", "3913818", "9107308", "2068048", "7155280", "1415462", "1268921", "3445991", "4502912", "3724189", "1191359", "6550650", "817203", "8721745", "4599195", "8958997", "4672128", "2680795", "1804651", "195373", "9907793", "8610558", "3846873", "9435856", "9168112", "4319966", "257673", "9619767", "6910621", "172746", "9826399", "6926920", "9124057", "779591", "1854611", "7583103", "6021870", "5382473", "6252334", "516970", "8946928", "6711466", "5035594", "8113724", "2208483", "1365711", "2224709", "9520238", "8378101", "7694653", "7470587", "3163023", "3792831", "1375427", "2209753", "4847596", "6824083", "9754703", "5230450", "1131134", "8974367", "5091440", "4053393", "9879296", "3180725", "267761", "1424167", "901557", "6815575", "582084", "3919750", "168844", "2696480", "4317074", "800152", "3813840", "2691114", "2006980", "1328487", "278094", "2209640", "619252", "2257420", "9028516", "4052793", "9066383", "7615877", "3416164", "6749836", "118767", "5027013", "2662734", "501031", "6080608", "1314732", "4198576", "1784538", "599555", "8510063", "1582167", "6530219", "6841475", "9774992", "5540204", "4539109", "4532207", "4015182", "6418191", "4703633", "2621541", "1979356", "5451651", "4719208", "307960", "9148793", "8475088", "8446734", "3679720", "4316998", "6308155", "1071544", "8234878", "4314969", "1343779", "1306366", "4059640", "140556", "7423334", "2225181", "2212450", "3914580", "6047916", "1580035", "7150145", "7931190", "7969812", "254902", "3269468", "90917", "2941225", "3169566", "7729994", "8035375", "2278847", "1077577", "6400077", "7086614", "3024656", "2971391", "7185682", "9242446", "7897004", "3245650", "1340915", "4181094", "3611275", "5853345", "5997405", "4680421", "2171987", "3916732", "6237060", "6978169", "6821906", "292941", "6316418", "7846461", "3190732", "4005631", "6637718", "9259356", "5764459", "1124512", "2881577", "6852264", "5895695", "9463703", "9764854", "4039748", "5612728", "513297", "269714", "3009920", "9305560", "4275422", "2705841", "6368778", "5422580", "8167115", "6538254", "3946895", "2864816", "3111998", "8779425", "1609767", "6945667", "1183823", "8063788", "4264956", "2368590", "5917631", "6342408", "7571586", "7113991", "5054856", "9272804", "9692840", "5066923", "313198", "845902", "8808657", "8252590", "7139306", "1513209", "1475734", "3966408", "9025658", "2949195", "5531136", "7149638", "5603315", "3598679", "8021839", "5269000", "2589839", "5651706", "9114295", "1076942", "8141340", "7070365", "8557633", "5425619", "2950279", "8635949", "3754194", "3533519", "6015770", "1998361", "6589536", "5539199", "2619459", "283119", "1642533", "3474452", "2961722", "6145255", "7406428", "4217657", "3742821", "3850050", "141887", "6204547", "6647567", "4056260", "4154733", "5202352", "3578173", "599857", "2326417", "2246526", "4342751", "2498464", "6261010", "5294497", "2589228", "5391051", "8062452", "3168311", "2281271", "9034403", "5545117", "6665996", "779150", "9088619", "1365480", "2937351", "9079173", "8838309", "2623267", "3390741", "6050307", "1982058", "931510", "3550799", "3883085", "9050797", "77968", "8244793", "2094284", "1179797", "1173578", "59688", "8397663", "4746486", "5437826", "668511", "789988", "2503822", "5537406", "6961042", "2558100", "9528746", "9993354", "657257", "506333", "1073407", "5148716", "4759533", "9279169", "3443461", "7159174", "1402087", "8814519", "1803940", "6372191", "8781393", "8761859", "1134788", "5554528", "2625299", "3011329", "9934428", "2180468", "8864167", "1678443", "3080642", "8482959", "5675153", "5975469", "9653913", "2160841", "353727", "6984410", "7907512", "4623063", "2103795", "8208667", "5136753", "4857472", "168651", "8410028", "7174864", "8617723", "7522879", "2634546", "2718464", "4369129", "2335343", "3388624", "6564304", "6368332", "259143", "1571467", "6813990", "7058153", "9355411", "461692", "3675085", "729218", "3613865", "6649464", "1824530", "6591133", "9649058", "893950", "7822982", "5009754", "3046722", "6815105", "4706164", "6955576", "3612624", "3553115", "7634657", "3265503", "1630296", "2552103", "8045284", "7269773", "1721730", "2992316", "9069794", "3403331", "8059871", "9288426", "8783297", "870369", "5485740", "7491296", "9188713", "1580925", "4698346", "8513200", "5544671", "1270588", "9974096", "9849024", "2066025", "6045192"];

static SEP: &str = "ababababababguflnefvunle";

#[bench]
fn string_small_regular(b: &mut test::Bencher) {
    b.iter(||
        for _ in 0..REPETITIONS { join(&SMALL, SEP); }
    )
}

#[bench]
fn string_small_other(b: &mut test::Bencher) {
    b.iter(||
        for _ in 0..REPETITIONS { join2(&SMALL, SEP); }
    )
}

#[bench]
fn string_large_regular(b: &mut test::Bencher) {
    b.iter(||
        for _ in 0..REPETITIONS { join(&LONG, SEP); }
    )
}

#[bench]
fn string_large_other(b: &mut test::Bencher) {
    b.iter(||
       for _ in 0..REPETITIONS { join2(&LONG, SEP); }
    )
}

#[test]
fn string_other_regular() {
    assert_eq!(join(&SMALL, "_"), join2(&SMALL, "_"));
    assert_eq!(join(&LONG, "_"), join2(&LONG, "_"));
}

static SMALL_VEC: [&[u8]; 10] = [
    b"abcbedufglneul", b"abcbeduaeeul", b"abcbeeufglneul",
    b"abcbesfglneul", b"abcbofglneul", b"abcbedcglneul",
    b"abnfglneul", b"abcbedcglneul", b"abcbedalneul",
    b"abcbevfglneul",];
static LONG_VEC: [&[u8]; 1000] = [b"8862205", b"862120", b"5267058", b"1881263", b"6802209", b"2377309", b"6884761", b"2480056", b"7448557", b"4530034", b"8394917", b"6279235", b"7807357", b"8561563", b"3230827", b"3243825", b"3503432", b"6221971", b"8837572", b"2311554", b"9905037", b"548618", b"3264032", b"4867109", b"9466642", b"1993062", b"104115", b"9949047", b"1185370", b"5536112", b"6736413", b"1010186", b"949542", b"4359599", b"1284449", b"5958787", b"699171", b"7427528", b"629918", b"4299968", b"6465455", b"2820155", b"531710", b"4226993", b"8133681", b"9868299", b"9266164", b"3236046", b"9846556", b"6691221", b"2270922", b"2086406", b"7011418", b"2571711", b"4579466", b"6577118", b"962157", b"3610734", b"2073021", b"6241537", b"8809063", b"7311514", b"354638", b"6799626", b"2945041", b"4979656", b"3211964", b"4055489", b"2016408", b"6699256", b"440984", b"9179817", b"9949411", b"27934", b"8183059", b"6480472", b"8427035", b"810375", b"2957997", b"4660807", b"5162557", b"3460974", b"4978530", b"918794", b"5710794", b"4759702", b"8124606", b"2140004", b"2447421", b"2980946", b"8632188", b"1085717", b"8935119", b"746713", b"5688085", b"9881173", b"9798945", b"1015157", b"8304124", b"7651081", b"2279712", b"4343984", b"4691565", b"2625431", b"8538201", b"9879916", b"7512520", b"9269701", b"1573798", b"1059524", b"6166511", b"6599819", b"4605174", b"3739368", b"6883907", b"2487841", b"5758440", b"6430236", b"4968365", b"3258090", b"3258501", b"6290921", b"5673243", b"391766", b"1647262", b"2004786", b"8444062", b"6865419", b"5257600", b"6680734", b"6709173", b"4552769", b"6433386", b"8041009", b"9485613", b"3328789", b"5095055", b"2169779", b"2200393", b"8184165", b"5206369", b"1438971", b"7905985", b"8946637", b"1161490", b"8626713", b"5042699", b"6349632", b"7407561", b"9944275", b"9161044", b"8618157", b"9763122", b"9807168", b"7929929", b"3232629", b"6137841", b"2015488", b"1250947", b"7901140", b"7504300", b"2433424", b"6242616", b"9655203", b"6806094", b"7261116", b"4979408", b"3317942", b"5723342", b"8875589", b"4385142", b"6167248", b"7800455", b"2317044", b"7464773", b"6047424", b"878087", b"7232826", b"2081524", b"1477339", b"7007211", b"3825468", b"2142982", b"1326772", b"9281289", b"2630029", b"3777360", b"9229331", b"6658828", b"8053114", b"7390665", b"1548797", b"8312264", b"6299119", b"4816281", b"4054084", b"4120733", b"8911288", b"8131907", b"7107213", b"2932731", b"1164102", b"2697709", b"6469272", b"9428136", b"8701925", b"7954003", b"2731320", b"1281541", b"8766980", b"2876113", b"7888928", b"9871158", b"8240142", b"2728383", b"3966251", b"4161830", b"7706384", b"6831404", b"8859003", b"5394162", b"7825737", b"7010615", b"9937939", b"6821499", b"8080401", b"1695193", b"5125934", b"4110032", b"3207589", b"484432", b"306324", b"4994097", b"3534513", b"1798173", b"8869528", b"4207978", b"5258674", b"5874112", b"9646793", b"9815226", b"8692398", b"4329388", b"2977456", b"2160720", b"1676279", b"7776238", b"7690177", b"4718795", b"4917182", b"4942042", b"3606775", b"5299805", b"2786156", b"2739952", b"8267625", b"4321351", b"1445821", b"6101909", b"8516388", b"7451793", b"7443834", b"442374", b"1708424", b"9893535", b"6037048", b"4260320", b"9642493", b"9344822", b"3580965", b"8287707", b"5925263", b"1988103", b"716623", b"6041406", b"5302070", b"2249202", b"2087690", b"2294318", b"6978820", b"4386461", b"5977475", b"8056874", b"8056926", b"8308475", b"1891024", b"7861805", b"6905708", b"562513", b"4244719", b"3354013", b"1511024", b"7111951", b"3292557", b"9066237", b"9922263", b"2101492", b"8396315", b"9323562", b"6112412", b"5747510", b"2108764", b"9394532", b"2563516", b"7784586", b"2441022", b"2409451", b"4792575", b"7471602", b"7335796", b"3610067", b"6665680", b"1685226", b"2419055", b"4355929", b"3979615", b"6297414", b"5160589", b"7514404", b"9445901", b"1140227", b"5001699", b"8544775", b"8154725", b"1868637", b"7118861", b"6132190", b"694320", b"5953590", b"8454956", b"5206953", b"1966645", b"6816221", b"7922888", b"7289293", b"4119413", b"2142166", b"8537267", b"6447599", b"7551273", b"851658", b"5361293", b"3467070", b"8043577", b"7550034", b"9462070", b"4236751", b"8355947", b"2646816", b"7754016", b"9632129", b"7251705", b"9847887", b"1359680", b"6305922", b"1254448", b"4704185", b"2922435", b"7332015", b"4961257", b"9356026", b"9099224", b"9092987", b"8788673", b"2488350", b"614477", b"8140321", b"8818318", b"170169", b"2837885", b"5708613", b"6791153", b"3426021", b"1672411", b"8262470", b"1726842", b"704466", b"8358349", b"2733483", b"6001121", b"9603015", b"4592763", b"8557819", b"5984300", b"5944994", b"2877873", b"1622971", b"8377884", b"3092416", b"8298891", b"8073066", b"9855881", b"827857", b"1324354", b"1040349", b"4447343", b"386346", b"5403378", b"7175322", b"1417021", b"6147993", b"6048543", b"5135934", b"4181102", b"3922214", b"9882588", b"8078398", b"4846164", b"9875799", b"7887010", b"7931029", b"5756563", b"5236540", b"2016236", b"4436239", b"1264269", b"4538710", b"4732044", b"3526597", b"4371229", b"8978682", b"5029149", b"1824814", b"3184125", b"8682371", b"2678202", b"8437724", b"6278622", b"4033614", b"7788250", b"8042754", b"1856726", b"2627422", b"3396422", b"2878318", b"3689371", b"5669451", b"5378129", b"2061001", b"3538230", b"7689705", b"6317441", b"1279197", b"8069102", b"1152751", b"1043278", b"110242", b"1498713", b"1919005", b"6473844", b"7326395", b"7123761", b"5056202", b"2588724", b"2216167", b"9801701", b"4778239", b"5920542", b"7883351", b"8718619", b"520354", b"5935299", b"7211846", b"416419", b"7012152", b"7221830", b"7046307", b"9142361", b"3991589", b"9380227", b"647860", b"5680267", b"1528981", b"3507729", b"9057707", b"3185335", b"1813286", b"3479523", b"108528", b"1334504", b"7172150", b"6925561", b"9014113", b"4341378", b"341964", b"3793745", b"773498", b"747344", b"7323046", b"7384275", b"6555756", b"1970109", b"9308963", b"8162762", b"9187904", b"9355400", b"2961663", b"5939280", b"5828749", b"4491159", b"5776307", b"2735417", b"5523039", b"6110697", b"3248730", b"4584374", b"2135517", b"7294523", b"9146349", b"4941304", b"6553650", b"4150086", b"8728817", b"7318675", b"7397393", b"2124452", b"5982344", b"2991054", b"8963139", b"5175572", b"4331992", b"4389313", b"3534975", b"5357", b"5782000", b"7989744", b"2213774", b"6304935", b"8761366", b"6693241", b"9019938", b"2944686", b"5017274", b"4177415", b"7816342", b"9880424", b"1795340", b"1828137", b"8450767", b"1109055", b"9726847", b"2633162", b"1484762", b"5294617", b"6248503", b"7035530", b"2156147", b"1243350", b"6824695", b"7816832", b"9340669", b"7026208", b"5585434", b"5548246", b"9600887", b"9032417", b"1017734", b"7614354", b"5581587", b"5322705", b"1160153", b"6270616", b"3074782", b"5749206", b"2358076", b"4340359", b"7157165", b"4970992", b"6331317", b"421871", b"4924391", b"8732904", b"369672", b"9907049", b"7118766", b"3440143", b"8776413", b"3018218", b"2522002", b"7714232", b"7766107", b"28936", b"5905759", b"6232599", b"1596305", b"6489205", b"4927712", b"2160698", b"7084994", b"1811970", b"3708884", b"3201484", b"3695741", b"7288946", b"8148524", b"6384284", b"5347964", b"2527639", b"5081256", b"1588924", b"7728811", b"8276719", b"3913818", b"9107308", b"2068048", b"7155280", b"1415462", b"1268921", b"3445991", b"4502912", b"3724189", b"1191359", b"6550650", b"817203", b"8721745", b"4599195", b"8958997", b"4672128", b"2680795", b"1804651", b"195373", b"9907793", b"8610558", b"3846873", b"9435856", b"9168112", b"4319966", b"257673", b"9619767", b"6910621", b"172746", b"9826399", b"6926920", b"9124057", b"779591", b"1854611", b"7583103", b"6021870", b"5382473", b"6252334", b"516970", b"8946928", b"6711466", b"5035594", b"8113724", b"2208483", b"1365711", b"2224709", b"9520238", b"8378101", b"7694653", b"7470587", b"3163023", b"3792831", b"1375427", b"2209753", b"4847596", b"6824083", b"9754703", b"5230450", b"1131134", b"8974367", b"5091440", b"4053393", b"9879296", b"3180725", b"267761", b"1424167", b"901557", b"6815575", b"582084", b"3919750", b"168844", b"2696480", b"4317074", b"800152", b"3813840", b"2691114", b"2006980", b"1328487", b"278094", b"2209640", b"619252", b"2257420", b"9028516", b"4052793", b"9066383", b"7615877", b"3416164", b"6749836", b"118767", b"5027013", b"2662734", b"501031", b"6080608", b"1314732", b"4198576", b"1784538", b"599555", b"8510063", b"1582167", b"6530219", b"6841475", b"9774992", b"5540204", b"4539109", b"4532207", b"4015182", b"6418191", b"4703633", b"2621541", b"1979356", b"5451651", b"4719208", b"307960", b"9148793", b"8475088", b"8446734", b"3679720", b"4316998", b"6308155", b"1071544", b"8234878", b"4314969", b"1343779", b"1306366", b"4059640", b"140556", b"7423334", b"2225181", b"2212450", b"3914580", b"6047916", b"1580035", b"7150145", b"7931190", b"7969812", b"254902", b"3269468", b"90917", b"2941225", b"3169566", b"7729994", b"8035375", b"2278847", b"1077577", b"6400077", b"7086614", b"3024656", b"2971391", b"7185682", b"9242446", b"7897004", b"3245650", b"1340915", b"4181094", b"3611275", b"5853345", b"5997405", b"4680421", b"2171987", b"3916732", b"6237060", b"6978169", b"6821906", b"292941", b"6316418", b"7846461", b"3190732", b"4005631", b"6637718", b"9259356", b"5764459", b"1124512", b"2881577", b"6852264", b"5895695", b"9463703", b"9764854", b"4039748", b"5612728", b"513297", b"269714", b"3009920", b"9305560", b"4275422", b"2705841", b"6368778", b"5422580", b"8167115", b"6538254", b"3946895", b"2864816", b"3111998", b"8779425", b"1609767", b"6945667", b"1183823", b"8063788", b"4264956", b"2368590", b"5917631", b"6342408", b"7571586", b"7113991", b"5054856", b"9272804", b"9692840", b"5066923", b"313198", b"845902", b"8808657", b"8252590", b"7139306", b"1513209", b"1475734", b"3966408", b"9025658", b"2949195", b"5531136", b"7149638", b"5603315", b"3598679", b"8021839", b"5269000", b"2589839", b"5651706", b"9114295", b"1076942", b"8141340", b"7070365", b"8557633", b"5425619", b"2950279", b"8635949", b"3754194", b"3533519", b"6015770", b"1998361", b"6589536", b"5539199", b"2619459", b"283119", b"1642533", b"3474452", b"2961722", b"6145255", b"7406428", b"4217657", b"3742821", b"3850050", b"141887", b"6204547", b"6647567", b"4056260", b"4154733", b"5202352", b"3578173", b"599857", b"2326417", b"2246526", b"4342751", b"2498464", b"6261010", b"5294497", b"2589228", b"5391051", b"8062452", b"3168311", b"2281271", b"9034403", b"5545117", b"6665996", b"779150", b"9088619", b"1365480", b"2937351", b"9079173", b"8838309", b"2623267", b"3390741", b"6050307", b"1982058", b"931510", b"3550799", b"3883085", b"9050797", b"77968", b"8244793", b"2094284", b"1179797", b"1173578", b"59688", b"8397663", b"4746486", b"5437826", b"668511", b"789988", b"2503822", b"5537406", b"6961042", b"2558100", b"9528746", b"9993354", b"657257", b"506333", b"1073407", b"5148716", b"4759533", b"9279169", b"3443461", b"7159174", b"1402087", b"8814519", b"1803940", b"6372191", b"8781393", b"8761859", b"1134788", b"5554528", b"2625299", b"3011329", b"9934428", b"2180468", b"8864167", b"1678443", b"3080642", b"8482959", b"5675153", b"5975469", b"9653913", b"2160841", b"353727", b"6984410", b"7907512", b"4623063", b"2103795", b"8208667", b"5136753", b"4857472", b"168651", b"8410028", b"7174864", b"8617723", b"7522879", b"2634546", b"2718464", b"4369129", b"2335343", b"3388624", b"6564304", b"6368332", b"259143", b"1571467", b"6813990", b"7058153", b"9355411", b"461692", b"3675085", b"729218", b"3613865", b"6649464", b"1824530", b"6591133", b"9649058", b"893950", b"7822982", b"5009754", b"3046722", b"6815105", b"4706164", b"6955576", b"3612624", b"3553115", b"7634657", b"3265503", b"1630296", b"2552103", b"8045284", b"7269773", b"1721730", b"2992316", b"9069794", b"3403331", b"8059871", b"9288426", b"8783297", b"870369", b"5485740", b"7491296", b"9188713", b"1580925", b"4698346", b"8513200", b"5544671", b"1270588", b"9974096", b"9849024", b"2066025", b"6045192"];

static SEP_VEC: &u8 = &20;

const REPETITIONS: usize = 1;

#[bench]
fn vec_small_regular(b: &mut test::Bencher) {
    b.iter(||
        for _ in 0..REPETITIONS {
            join_vec(&SMALL_VEC, SEP_VEC);
        }
    )
}

#[bench]
fn vec_small_other(b: &mut test::Bencher) {
    b.iter(||
        for _ in 0..REPETITIONS {
            join_vec_other(&SMALL_VEC, SEP_VEC);
        }
    )
}

#[bench]
fn vec_large_regular(b: &mut test::Bencher) {
    b.iter(||
        for _ in 0..REPETITIONS {
            join_vec(&LONG_VEC, SEP_VEC);
        }
    )
}

#[bench]
fn vec_large_other(b: &mut test::Bencher) {
    b.iter(||
        for _ in 0..REPETITIONS {
           join_vec_other(&LONG_VEC, SEP_VEC);
        }
    )
}

#[test]
fn vec_other_regular() {
    assert_eq!(join_vec(&SMALL_VEC, SEP_VEC), join_vec_other(&SMALL_VEC, SEP_VEC));
    assert_eq!(join_vec(&LONG_VEC, SEP_VEC), join_vec_other(&LONG_VEC, SEP_VEC));
}

#[bench]
fn sanity_vec(b: &mut test::Bencher) {
    b.iter(|| {
        /*
        for s in LONG_VEC.iter() {
            test::black_box(
                s.to_owned()
            );
        }
        */
        LONG_VEC.concat();
    })
}


#[bench]
fn sanity_string(b: &mut test::Bencher) {
    b.iter(|| {
        /*
        for s in LONG.iter() {
            test::black_box(
                //s.to_owned()
            );
        }
        */
        LONG.concat();
    })
}

#[bench]
fn sanity_alloc_vec(b: &mut test::Bencher) {
    b.iter(|| {
        for s in LONG_VEC.iter() {
            test::black_box(
                s.to_owned()
            );
        }

        //LONG_VEC.concat();
    })
}


#[bench]
fn sanity_alloc_string(b: &mut test::Bencher) {
    b.iter(|| {
        for s in LONG.iter() {
            test::black_box(
                s.to_owned()
            );
        }
        //LONG.concat();
    })
}

#[bench]
fn sanity_join_vec(b: &mut test::Bencher) {
    b.iter(|| {
        LONG_VEC.join(&65);
    })
}

#[bench]
fn sanity_join_vec_slice_separator(b: &mut test::Bencher) {
    b.iter(|| {
        join_into_vec(&LONG_VEC, &[65u8]);
    })
}

#[bench]
fn sanity_join_string(b: &mut test::Bencher) {
    b.iter(|| {
        LONG.join("A");
    })
}

#[test]
fn byte_equality() {
    for (s, &b) in SMALL.iter().zip(SMALL_VEC.iter()) {
        assert_eq!(s.as_bytes(), b);
    }
    for (s, &b) in LONG.iter().zip(LONG_VEC.iter()) {
        assert_eq!(s.as_bytes(), b);
    }
}
